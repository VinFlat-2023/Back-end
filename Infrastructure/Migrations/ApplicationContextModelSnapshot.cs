// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("AreaImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            AreaImageUrl1 = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/PANO0002-Pano.jpg/1200px-PANO0002-Pano.jpg",
                            Name = "Quận 1",
                            Status = true
                        },
                        new
                        {
                            AreaId = 2,
                            AreaImageUrl1 = "https://i1-vnexpress.vnecdn.net/2022/11/17/Ve-may-bay-di-sai-gon-600x399-4356-2813-1668672299.jpg?w=0&h=0&q=100&dpr=2&fit=crop&s=8All1Mq-so56XkVbZXvdFA",
                            Name = "Quận 2",
                            Status = true
                        },
                        new
                        {
                            AreaId = 3,
                            AreaImageUrl1 = "https://images.pexels.com/photos/11742806/pexels-photo-11742806.jpeg?cs=srgb&dl=pexels-th%E1%BB%8Bnh-la-11742806.jpg&fm=jpg",
                            Name = "Quận 3",
                            Status = true
                        },
                        new
                        {
                            AreaId = 4,
                            AreaImageUrl1 = "",
                            Name = "Quận 4",
                            Status = true
                        },
                        new
                        {
                            AreaId = 5,
                            AreaImageUrl1 = "",
                            Name = "Quận 5",
                            Status = true
                        },
                        new
                        {
                            AreaId = 6,
                            AreaImageUrl1 = "",
                            Name = "Quận 6",
                            Status = true
                        },
                        new
                        {
                            AreaId = 7,
                            AreaImageUrl1 = "",
                            Name = "Quận 7",
                            Status = true
                        },
                        new
                        {
                            AreaId = 8,
                            AreaImageUrl1 = "",
                            Name = "Quận 8",
                            Status = true
                        },
                        new
                        {
                            AreaId = 9,
                            AreaImageUrl1 = "",
                            Name = "Quận 9",
                            Status = true
                        },
                        new
                        {
                            AreaId = 10,
                            AreaImageUrl1 = "",
                            Name = "Quận 10",
                            Status = true
                        },
                        new
                        {
                            AreaId = 11,
                            AreaImageUrl1 = "",
                            Name = "Quận 11",
                            Status = true
                        },
                        new
                        {
                            AreaId = 12,
                            AreaImageUrl1 = "",
                            Name = "Quận 12",
                            Status = true
                        },
                        new
                        {
                            AreaId = 13,
                            AreaImageUrl1 = "",
                            Name = "Quận Bình Thạnh",
                            Status = true
                        },
                        new
                        {
                            AreaId = 14,
                            AreaImageUrl1 = "",
                            Name = "Quận Gò Vấp",
                            Status = true
                        },
                        new
                        {
                            AreaId = 15,
                            AreaImageUrl1 = "",
                            Name = "Quận Phú Nhuận",
                            Status = true
                        },
                        new
                        {
                            AreaId = 16,
                            AreaImageUrl1 = "",
                            Name = "Quận Tân Bình",
                            Status = true
                        },
                        new
                        {
                            AreaId = 17,
                            AreaImageUrl1 = "",
                            Name = "Quận Tân Phú",
                            Status = true
                        },
                        new
                        {
                            AreaId = 18,
                            AreaImageUrl1 = "",
                            Name = "Quận Bình Tân",
                            Status = true
                        },
                        new
                        {
                            AreaId = 19,
                            AreaImageUrl1 = "",
                            Name = "Quận Nhà Bè",
                            Status = true
                        },
                        new
                        {
                            AreaId = 20,
                            AreaImageUrl1 = "",
                            Name = "Quận Hóc Môn",
                            Status = true
                        },
                        new
                        {
                            AreaId = 21,
                            AreaImageUrl1 = "",
                            Name = "Quận Củ Chi",
                            Status = true
                        },
                        new
                        {
                            AreaId = 22,
                            AreaImageUrl1 = "",
                            Name = "Quận Cần Giờ",
                            Status = true
                        },
                        new
                        {
                            AreaId = 23,
                            AreaImageUrl1 = "",
                            Name = "Quận Bình Chánh",
                            Status = true
                        },
                        new
                        {
                            AreaId = 24,
                            AreaImageUrl1 = "",
                            Name = "Quận Thủ Đức",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BuildingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImageUrl6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalFlats")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            AreaId = 1,
                            AveragePrice = 2500000m,
                            BuildingAddress = "Quận 1",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/6716250e-8169-446d-a54e-37094c30ae70thumbnail-202303031027054744.jpg",
                            BuildingName = "Building 1 quận 1",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 1",
                            EmployeeId = 1,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 2,
                            AreaId = 1,
                            AveragePrice = 2600000m,
                            BuildingAddress = "Quận 1",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/be39f244-45d1-48cc-94dc-7e1b138caa3athumbnail-202302251636284394.jpg",
                            BuildingName = "Building 2 quận 1",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 1",
                            EmployeeId = 2,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 3,
                            AreaId = 2,
                            AveragePrice = 3500000m,
                            BuildingAddress = "Quận 2",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/8a8ea225-ea25-422c-a20d-299c7ed42456thumbnail-202302041627581789.jpg",
                            BuildingName = "Building 1 quận 2",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 2",
                            EmployeeId = 3,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 4,
                            AreaId = 2,
                            AveragePrice = 4500000m,
                            BuildingAddress = "Quận 2",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/69d0767f-ff29-49dc-88fc-c3bc87cba986thumbnail-202212291740189478.jpg",
                            BuildingName = "Building 2 quận 2",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 2",
                            EmployeeId = 4,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 5,
                            AreaId = 3,
                            AveragePrice = 4600000m,
                            BuildingAddress = "Quận 3",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a3f9897c-800e-4d5e-92b7-e388eefdf64bthumbnail-202212151636139810.jpg",
                            BuildingName = "Building 1 quận 3",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 3",
                            EmployeeId = 5,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 6,
                            AreaId = 3,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 3",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 3",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 3",
                            EmployeeId = 6,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 7,
                            AreaId = 4,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 4",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 4",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 4",
                            EmployeeId = 8,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 8,
                            AreaId = 4,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 4",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 4",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 4",
                            EmployeeId = 9,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 9,
                            AreaId = 5,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 5",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 5",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 5",
                            EmployeeId = 10,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 10,
                            AreaId = 5,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 5",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 5",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 5",
                            EmployeeId = 11,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 11,
                            AreaId = 6,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 6",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 6",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 6",
                            EmployeeId = 12,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 12,
                            AreaId = 6,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 6",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 6",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 6",
                            EmployeeId = 13,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 13,
                            AreaId = 7,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 7",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 7",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 7",
                            EmployeeId = 14,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 14,
                            AreaId = 7,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 7",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 7",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 7",
                            EmployeeId = 15,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 15,
                            AreaId = 8,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 8",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 8",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 8",
                            EmployeeId = 16,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 16,
                            AreaId = 8,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 8",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 8",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 8",
                            EmployeeId = 17,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 17,
                            AreaId = 9,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 9",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 9",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 9",
                            EmployeeId = 18,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 18,
                            AreaId = 9,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 9",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 9",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 9",
                            EmployeeId = 19,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 19,
                            AreaId = 10,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 9",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 10",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 10",
                            EmployeeId = 20,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 20,
                            AreaId = 10,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 10",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 10",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 10",
                            EmployeeId = 21,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 21,
                            AreaId = 11,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 10",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 11",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 11",
                            EmployeeId = 22,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 22,
                            AreaId = 11,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 11",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 11",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 11",
                            EmployeeId = 23,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 23,
                            AreaId = 12,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 12",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận 12",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận 12",
                            EmployeeId = 24,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 24,
                            AreaId = 12,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 12",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận 12",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận 12",
                            EmployeeId = 25,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 25,
                            AreaId = 13,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Thạnh",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Bình Thạnh",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Bình Thạnh",
                            EmployeeId = 26,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 26,
                            AreaId = 13,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Thanh",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Bình Thanh",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Bình Thanh",
                            EmployeeId = 27,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 27,
                            AreaId = 14,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 3",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Gò Vấp",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Gò Vấp",
                            EmployeeId = 28,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 28,
                            AreaId = 14,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 3",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Gò Vấp",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Gò Vấp",
                            EmployeeId = 29,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 29,
                            AreaId = 15,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Phú Nhuận",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Phú Nhuận",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Phú Nhuận",
                            EmployeeId = 30,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 30,
                            AreaId = 15,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Phú Nhuận",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Phú Nhuận",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Phú Nhuận",
                            EmployeeId = 31,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 31,
                            AreaId = 16,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Tân Bình",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Tân Bình",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Tân Bình",
                            EmployeeId = 32,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 32,
                            AreaId = 16,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Tân Bình",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Tân Bình",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Tân Bình",
                            EmployeeId = 33,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 33,
                            AreaId = 17,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Tân Phú",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Tân Phú",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Tân Phú",
                            EmployeeId = 34,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 34,
                            AreaId = 17,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Tân Phú",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Tân Phú",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Tân Phú",
                            EmployeeId = 35,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 35,
                            AreaId = 18,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Tân",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Bình Tân",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Bình Tân",
                            EmployeeId = 36,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 36,
                            AreaId = 18,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Tân",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Bình Tân",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Bình Tân",
                            EmployeeId = 37,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 37,
                            AreaId = 19,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận 3",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Nhà Bè",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Nhà Bè",
                            EmployeeId = 38,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 38,
                            AreaId = 19,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Nhà Bè",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Nhà Bè",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Nhà Bè",
                            EmployeeId = 39,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 39,
                            AreaId = 20,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Hóc Môn",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Hóc Môn",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Hóc Môn",
                            EmployeeId = 40,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 40,
                            AreaId = 20,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Hóc Môn",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Hóc Môn",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Hóc Môn",
                            EmployeeId = 41,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 41,
                            AreaId = 21,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Củ Chi",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Củ Chi",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Củ Chi",
                            EmployeeId = 42,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 42,
                            AreaId = 21,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Củ Chi",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Củ Chi",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Củ Chi",
                            EmployeeId = 43,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 43,
                            AreaId = 22,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Cần Giờ",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Cần Giờ",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Cần Giờ",
                            EmployeeId = 44,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 44,
                            AreaId = 22,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Cần Giờ",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Cần Giờ",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Cần Giờ",
                            EmployeeId = 45,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 45,
                            AreaId = 23,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Chánh",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Bình Chánh",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Bình Chánh",
                            EmployeeId = 46,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 46,
                            AreaId = 23,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Bình Chánh",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Bình Chánh",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Bình Chánh",
                            EmployeeId = 47,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 47,
                            AreaId = 24,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Thủ Đức",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 1 quận Thủ Đức",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 1 quận Thủ Đức",
                            EmployeeId = 46,
                            Status = true,
                            TotalFlats = 0
                        },
                        new
                        {
                            BuildingId = 48,
                            AreaId = 24,
                            AveragePrice = 5300000m,
                            BuildingAddress = "Quận Thủ Đức",
                            BuildingImageUrl1 = "https://vinflat.blob.core.windows.net/building-image/a040d02d-634a-4206-88a5-10fbbc1482f7image7.jpg",
                            BuildingName = "Building 2 quận Thủ Đức",
                            BuildingPhoneNumber = "012323123",
                            Description = "Building 2 quận Thủ Đức",
                            EmployeeId = 47,
                            Status = true,
                            TotalFlats = 0
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<decimal>("PriceForElectricity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForService")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForWater")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RenterId");

                    b.ToTable("Contracts", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            ContractId = 1,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl3 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl4 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 1",
                            ContractSerialNumber = "VF-0001",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9265),
                            Description = "Contract description for renter 1",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9268),
                            PriceForElectricity = 0m,
                            PriceForRent = 1800000m,
                            PriceForService = 0m,
                            PriceForWater = 0m,
                            RenterId = 1,
                            RoomId = 3,
                            StartDate = new DateTime(2023, 4, 30, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9268)
                        },
                        new
                        {
                            ContractId = 2,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl3 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl4 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 2",
                            ContractSerialNumber = "VF-0002",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 26, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9274),
                            Description = "Contract description for renter 2",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9275),
                            PriceForElectricity = 0m,
                            PriceForRent = 2800000m,
                            PriceForService = 0m,
                            PriceForWater = 0m,
                            RenterId = 2,
                            RoomId = 3,
                            StartDate = new DateTime(2023, 4, 28, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9274)
                        },
                        new
                        {
                            ContractId = 3,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl3 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl4 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 3",
                            ContractSerialNumber = "VF-0003",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 26, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9278),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9278),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 3,
                            StartDate = new DateTime(2023, 4, 28, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9278)
                        },
                        new
                        {
                            ContractId = 4,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl3 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl4 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 3 (2)",
                            ContractSerialNumber = "VF-0004",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 26, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9281),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9282),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 4, 28, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9281)
                        },
                        new
                        {
                            ContractId = 5,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl3 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl4 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 3 (3)",
                            ContractSerialNumber = "VF-0005",
                            ContractStatus = "Inactive",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 26, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9284),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9298),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 4, 28, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9284)
                        },
                        new
                        {
                            ContractId = 6,
                            BuildingId = 3,
                            ContractImageUrl1 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractImageUrl2 = "https://parleypro.azurewebsites.net/wp-content/uploads/2021/01/license-agreemen-example.jpg",
                            ContractName = "Contract for renter 3 (4)",
                            ContractSerialNumber = "VF-0006",
                            ContractStatus = "Inactive",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 4, 26, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9300),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            LastUpdated = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9306),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 4, 28, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9305)
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SupervisorBuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianBuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "Sup1 address",
                            Email = "binhlinh@mail",
                            FullName = "Bình Linh",
                            Password = "123456",
                            PhoneNumber = "0912345678",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 1,
                            Username = "sup1"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "Sup2 address",
                            Email = "thoahy@mail",
                            FullName = "Thoa Hy",
                            Password = "123456",
                            PhoneNumber = "0923456789",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 2,
                            Username = "sup2"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "Sup3 address",
                            Email = "khoihuy@mail",
                            FullName = "Khôi Huy",
                            Password = "123456",
                            PhoneNumber = "0812345678",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 3,
                            Username = "sup3"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Address = "Sup4 address",
                            Email = "ngachau@mail",
                            FullName = "Nga Châu",
                            Password = "123456",
                            PhoneNumber = "0823456789",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 4,
                            Username = "sup4"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Address = "Sup5 address",
                            Email = "ngochuy@mail",
                            FullName = "Ngọc Huy",
                            Password = "123456",
                            PhoneNumber = "0834567890",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 5,
                            Username = "sup5"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Address = "Employee address",
                            Email = "ngason@mail",
                            FullName = "Ngà Sơn",
                            Password = "123",
                            PhoneNumber = "0712345678",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 6,
                            Username = "sup6"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Address = "Admin address",
                            Email = "thuminh@mail",
                            FullName = "Thư Minh",
                            Password = "123456",
                            PhoneNumber = "0723456789",
                            RoleId = 1,
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Address = "Employee address",
                            Email = "minhanh123@mail",
                            FullName = "Minh Anh",
                            Password = "123456",
                            PhoneNumber = "0723567890",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 7,
                            Username = "sup7"
                        },
                        new
                        {
                            EmployeeId = 9,
                            Address = "Employee address",
                            Email = "minhngon@mail",
                            FullName = "Minh Ngọc",
                            Password = "123456",
                            PhoneNumber = "0913456324",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 8,
                            Username = "sup8"
                        },
                        new
                        {
                            EmployeeId = 10,
                            Address = "Employee address",
                            Email = "manhkhoa@mail",
                            FullName = "Mạnh Khoa",
                            Password = "123456",
                            PhoneNumber = "0942184853",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 9,
                            Username = "sup9"
                        },
                        new
                        {
                            EmployeeId = 11,
                            Address = "Employee address",
                            Email = "khangngoc@mail",
                            FullName = "Khang Ngọc",
                            Password = "123456",
                            PhoneNumber = "0234328589",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 10,
                            Username = "sup10"
                        },
                        new
                        {
                            EmployeeId = 12,
                            Address = "Employee address",
                            Email = "hoangminh@mail",
                            FullName = "Hoàng Minh",
                            Password = "123456",
                            PhoneNumber = "0482138128",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 11,
                            Username = "sup11"
                        },
                        new
                        {
                            EmployeeId = 13,
                            Address = "Employee address",
                            Email = "ankhang@mail",
                            FullName = "An Khang",
                            Password = "123456",
                            PhoneNumber = "0763125422",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 12,
                            Username = "sup12"
                        },
                        new
                        {
                            EmployeeId = 14,
                            Address = "Employee address",
                            Email = "tranghoa@mail",
                            FullName = "Trang Hoà",
                            Password = "123456",
                            PhoneNumber = "0358438539",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 13,
                            Username = "sup13"
                        },
                        new
                        {
                            EmployeeId = 15,
                            Address = "Employee address",
                            Email = "minhtinh@mail",
                            FullName = "Minh Tính",
                            Password = "123456",
                            PhoneNumber = "0429215737",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 14,
                            Username = "sup14"
                        },
                        new
                        {
                            EmployeeId = 16,
                            Address = "Employee address",
                            Email = "tienhoang@mail",
                            FullName = "Tiên Hoàng",
                            Password = "123456",
                            PhoneNumber = "0582021245",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 15,
                            Username = "sup15"
                        },
                        new
                        {
                            EmployeeId = 17,
                            Address = "Employee address",
                            Email = "thanhhoa032@mail",
                            FullName = "Thanh Hoa",
                            Password = "123456",
                            PhoneNumber = "0984271626",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 16,
                            Username = "sup16"
                        },
                        new
                        {
                            EmployeeId = 18,
                            Address = "Employee address",
                            Email = "ngason234@mail",
                            FullName = "Ngà Sơn",
                            Password = "123",
                            PhoneNumber = "012312323235",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 17,
                            Username = "sup17"
                        },
                        new
                        {
                            EmployeeId = 19,
                            Address = "Employee address",
                            Email = "hoangthao@mail",
                            FullName = "Hoàng Thoa",
                            Password = "123",
                            PhoneNumber = "0932441829",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 18,
                            Username = "sup18"
                        },
                        new
                        {
                            EmployeeId = 20,
                            Address = "Employee address",
                            Email = "minhnghi@mail",
                            FullName = "Minh Nghi",
                            Password = "123456",
                            PhoneNumber = "0490238588",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 19,
                            Username = "sup19"
                        },
                        new
                        {
                            EmployeeId = 21,
                            Address = "Employee address",
                            Email = "manhhung@mail",
                            FullName = "Mạnh Hùng",
                            Password = "123456",
                            PhoneNumber = "0943573182",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 20,
                            Username = "sup20"
                        },
                        new
                        {
                            EmployeeId = 22,
                            Address = "Employee address",
                            Email = "huongtram@mail",
                            FullName = "Hương Tràm",
                            Password = "123456",
                            PhoneNumber = "0984372814",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 21,
                            Username = "sup21"
                        },
                        new
                        {
                            EmployeeId = 23,
                            Address = "Employee address",
                            Email = "minhhoang@mail",
                            FullName = "Minh Hoàng",
                            Password = "123456",
                            PhoneNumber = "0958214539",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 22,
                            Username = "sup24"
                        },
                        new
                        {
                            EmployeeId = 24,
                            Address = "Employee address",
                            Email = "hoangthanh12@mail",
                            FullName = "Hoàng Thanh",
                            Password = "123456",
                            PhoneNumber = "012312323235",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 23,
                            Username = "sup25"
                        },
                        new
                        {
                            EmployeeId = 25,
                            Address = "Employee address",
                            Email = "anhtu@mail",
                            FullName = "Anh Tú",
                            Password = "123456",
                            PhoneNumber = "0943783365",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 24,
                            Username = "sup26"
                        },
                        new
                        {
                            EmployeeId = 26,
                            Address = "Employee address",
                            Email = "anhhung@mail",
                            FullName = "Anh Hùng",
                            Password = "123456",
                            PhoneNumber = "0913683923",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 25,
                            Username = "sup27"
                        },
                        new
                        {
                            EmployeeId = 27,
                            Address = "Employee address",
                            Email = "khanhhuy32@mail",
                            FullName = "Khánh Huy",
                            Password = "123456",
                            PhoneNumber = "0942812643",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 26,
                            Username = "sup28"
                        },
                        new
                        {
                            EmployeeId = 28,
                            Address = "Employee address",
                            Email = "vinhhung@mail",
                            FullName = "Vinh Hưng",
                            Password = "123456",
                            PhoneNumber = "012312323235",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 27,
                            Username = "sup29"
                        },
                        new
                        {
                            EmployeeId = 29,
                            Address = "Employee address",
                            Email = "khangtrung@mail",
                            FullName = "Khang Trung",
                            Password = "123456",
                            PhoneNumber = "0918238483",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 28,
                            Username = "sup30"
                        },
                        new
                        {
                            EmployeeId = 30,
                            Address = "Employee address",
                            Email = "tranghuyen123@mail",
                            FullName = "Trang Huyền",
                            Password = "123456",
                            PhoneNumber = "0984271544",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 29,
                            Username = "sup31"
                        },
                        new
                        {
                            EmployeeId = 31,
                            Address = "Employee address",
                            Email = "hatrang4@mail",
                            FullName = "Hà Trang",
                            Password = "123456",
                            PhoneNumber = "0384943481",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 30,
                            Username = "sup32"
                        },
                        new
                        {
                            EmployeeId = 32,
                            Address = "Employee address",
                            Email = "sonha3@mail",
                            FullName = "Sơn Hà",
                            Password = "123456",
                            PhoneNumber = "0938772581",
                            RoleId = 2,
                            Status = true,
                            SupervisorBuildingId = 31,
                            Username = "sup33"
                        },
                        new
                        {
                            EmployeeId = 33,
                            Address = "Employee address",
                            Email = "nguuson32@mail",
                            FullName = "Ngưu Sơn",
                            Password = "123456",
                            PhoneNumber = "0485245513",
                            RoleId = 2,
                            Status = true,
                            Username = "sup34"
                        },
                        new
                        {
                            EmployeeId = 34,
                            Address = "Employee address",
                            Email = "thuyson32@mail",
                            FullName = "Thúy Sơn",
                            Password = "123456",
                            PhoneNumber = "0947327121",
                            RoleId = 2,
                            Status = true,
                            Username = "sup35"
                        },
                        new
                        {
                            EmployeeId = 35,
                            Address = "Employee address",
                            Email = "thanhho13@mail",
                            FullName = "Thanh Hồ",
                            Password = "123456",
                            PhoneNumber = "0942837429",
                            RoleId = 2,
                            Status = true,
                            Username = "sup36"
                        },
                        new
                        {
                            EmployeeId = 36,
                            Address = "Employee address",
                            Email = "quanghuy29@mail",
                            FullName = "Quang Huy",
                            Password = "123456",
                            PhoneNumber = "0947291723",
                            RoleId = 2,
                            Status = true,
                            Username = "sup37"
                        },
                        new
                        {
                            EmployeeId = 37,
                            Address = "Employee address",
                            Email = "khanhtram32@mail",
                            FullName = "Khánh Trâm",
                            Password = "123456",
                            PhoneNumber = "0938271525",
                            RoleId = 2,
                            Status = true,
                            Username = "sup38"
                        },
                        new
                        {
                            EmployeeId = 38,
                            Address = "Employee address",
                            Email = "sontrang12@mail",
                            FullName = "Sơn Trang",
                            Password = "123456",
                            PhoneNumber = "0948271626",
                            RoleId = 2,
                            Status = true,
                            Username = "sup39"
                        },
                        new
                        {
                            EmployeeId = 39,
                            Address = "Employee address",
                            Email = "minhlam23@mail",
                            FullName = "Minh Lâm",
                            Password = "123456",
                            PhoneNumber = "0942647123",
                            RoleId = 2,
                            Status = true,
                            Username = "sup40"
                        },
                        new
                        {
                            EmployeeId = 40,
                            Address = "Employee address",
                            Email = "hangsuong23@mail",
                            FullName = "Hằng Sương",
                            Password = "123456",
                            PhoneNumber = "0928367325",
                            RoleId = 2,
                            Status = true,
                            Username = "sup41"
                        },
                        new
                        {
                            EmployeeId = 41,
                            Address = "Employee address",
                            Email = "uyenchi47@mail",
                            FullName = "Uyên Chi",
                            Password = "123456",
                            PhoneNumber = "0975383282",
                            RoleId = 2,
                            Status = true,
                            Username = "sup42"
                        },
                        new
                        {
                            EmployeeId = 42,
                            Address = "Employee address",
                            Email = "lamtoan12@mail",
                            FullName = "Lâm Toàn",
                            Password = "123456",
                            PhoneNumber = "0942537435",
                            RoleId = 2,
                            Status = true,
                            Username = "sup43"
                        },
                        new
                        {
                            EmployeeId = 43,
                            Address = "Employee address",
                            Email = "minhtoan@mail",
                            FullName = "Minh Toàn",
                            Password = "123456",
                            PhoneNumber = "0938243827",
                            RoleId = 2,
                            Status = true,
                            Username = "sup44"
                        },
                        new
                        {
                            EmployeeId = 44,
                            Address = "Employee address",
                            Email = "nhamson@mail",
                            FullName = "Nhâm Sơn",
                            Password = "123456",
                            PhoneNumber = "0837243827",
                            RoleId = 2,
                            Status = true,
                            Username = "sup45"
                        },
                        new
                        {
                            EmployeeId = 45,
                            Address = "Employee address",
                            Email = "sonkim432@mail",
                            FullName = "Sơn Kim",
                            Password = "123456",
                            PhoneNumber = "0947348292",
                            RoleId = 2,
                            Status = true,
                            Username = "sup46"
                        },
                        new
                        {
                            EmployeeId = 46,
                            Address = "Employee address",
                            Email = "kimtien32@mail",
                            FullName = "Kim Tiền",
                            Password = "123456",
                            PhoneNumber = "0847342789",
                            RoleId = 2,
                            Status = true,
                            Username = "sup47"
                        },
                        new
                        {
                            EmployeeId = 47,
                            Address = "Employee address",
                            Email = "tienkim384@mail",
                            FullName = "Tiến Kim",
                            Password = "123456",
                            PhoneNumber = "012312323235",
                            RoleId = 2,
                            Status = true,
                            Username = "sup48"
                        },
                        new
                        {
                            EmployeeId = 48,
                            Address = "Employee address",
                            Email = "manhson292@mail",
                            FullName = "Mạnh Sơn",
                            Password = "123456",
                            PhoneNumber = "0485838261",
                            RoleId = 2,
                            Status = true,
                            Username = "sup49"
                        },
                        new
                        {
                            EmployeeId = 49,
                            Address = "Employee address",
                            Email = "longhuong12@mail",
                            FullName = "Long Hương",
                            Password = "123456",
                            PhoneNumber = "0749274839",
                            RoleId = 2,
                            Status = true,
                            Username = "sup50"
                        },
                        new
                        {
                            EmployeeId = 50,
                            Address = "Employee address",
                            Email = "nhantrong25@mail",
                            FullName = "Nhân Trọng",
                            Password = "123456",
                            PhoneNumber = "0984028345",
                            RoleId = 2,
                            Status = true,
                            Username = "sup51"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RenterId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Property<int>("FeedbackTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackTypeId");

                    b.ToTable("FeedbackTypes");

                    b.HasData(
                        new
                        {
                            FeedbackTypeId = 1,
                            Name = "Rating"
                        },
                        new
                        {
                            FeedbackTypeId = 2,
                            Name = "Suggestion"
                        },
                        new
                        {
                            FeedbackTypeId = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Property<int>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatId"), 1L, 1);

                    b.Property<int>("AvailableRoom")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ElectricityMeterAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ElectricityMeterBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FlatImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImageUrl5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImageUrl6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlatTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoom")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WaterMeterAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaterMeterBefore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FlatId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FlatTypeId");

                    b.ToTable("Flats");

                    b.HasData(
                        new
                        {
                            FlatId = 1,
                            AvailableRoom = 0,
                            BuildingId = 1,
                            Description = "Flat 1",
                            ElectricityMeterAfter = 0m,
                            ElectricityMeterBefore = 0m,
                            FlatTypeId = 1,
                            MaxRoom = 0,
                            Name = "Flat 1",
                            Status = "Active",
                            WaterMeterAfter = 0m,
                            WaterMeterBefore = 0m
                        },
                        new
                        {
                            FlatId = 2,
                            AvailableRoom = 0,
                            BuildingId = 3,
                            Description = "Flat 2",
                            ElectricityMeterAfter = 0m,
                            ElectricityMeterBefore = 0m,
                            FlatTypeId = 3,
                            MaxRoom = 0,
                            Name = "Flat 2",
                            Status = "Active",
                            WaterMeterAfter = 0m,
                            WaterMeterBefore = 0m
                        },
                        new
                        {
                            FlatId = 3,
                            AvailableRoom = 0,
                            BuildingId = 2,
                            Description = "Flat 3",
                            ElectricityMeterAfter = 0m,
                            ElectricityMeterBefore = 0m,
                            FlatTypeId = 2,
                            MaxRoom = 0,
                            Name = "Flat 3",
                            Status = "Active",
                            WaterMeterAfter = 0m,
                            WaterMeterBefore = 0m
                        },
                        new
                        {
                            FlatId = 4,
                            AvailableRoom = 0,
                            BuildingId = 2,
                            Description = "Flat 4",
                            ElectricityMeterAfter = 0m,
                            ElectricityMeterBefore = 0m,
                            FlatTypeId = 5,
                            MaxRoom = 0,
                            Name = "Flat 4",
                            Status = "NonActive",
                            WaterMeterAfter = 0m,
                            WaterMeterBefore = 0m
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Property<int>("FlatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FlatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("FlatTypeId");

                    b.ToTable("FlatTypes");

                    b.HasData(
                        new
                        {
                            FlatTypeId = 1,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 10,
                            Status = true
                        },
                        new
                        {
                            FlatTypeId = 2,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 2,
                            Status = true
                        },
                        new
                        {
                            FlatTypeId = 3,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 4,
                            Status = true
                        },
                        new
                        {
                            FlatTypeId = 4,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 5,
                            Status = true
                        },
                        new
                        {
                            FlatTypeId = 5,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 6,
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("RenterId");

                    b.ToTable("Invoices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9160),
                            Detail = "Detail for invoice 1",
                            EmployeeId = 2,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 1",
                            RenterId = 1,
                            Status = true,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 2,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9162),
                            Detail = "Detail for invoice 2",
                            EmployeeId = 3,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 2",
                            RenterId = 2,
                            Status = true,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 3,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9164),
                            Detail = "Detail for invoice 3",
                            DueDate = new DateTime(2023, 6, 24, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9165),
                            EmployeeId = 4,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3",
                            RenterId = 3,
                            Status = false,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 4,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 1, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9169),
                            Detail = "Detail for invoice 3 (2)",
                            DueDate = new DateTime(2023, 2, 22, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9172),
                            EmployeeId = 2,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (2)",
                            PaymentTime = new DateTime(2023, 2, 20, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9173),
                            RenterId = 3,
                            Status = true,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 5,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 2, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9177),
                            Detail = "Detail for invoice 3 (3)",
                            DueDate = new DateTime(2023, 3, 14, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9178),
                            EmployeeId = 2,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (3)",
                            PaymentTime = new DateTime(2023, 3, 12, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9179),
                            RenterId = 3,
                            Status = true,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 6,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 4, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9180),
                            Detail = "Detail for invoice 3 (4)",
                            DueDate = new DateTime(2023, 5, 13, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9181),
                            EmployeeId = 2,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (4)",
                            PaymentTime = new DateTime(2023, 5, 11, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9181),
                            RenterId = 3,
                            Status = true,
                            TotalAmount = 0m
                        },
                        new
                        {
                            InvoiceId = 7,
                            BuildingId = 0,
                            CreatedTime = new DateTime(2023, 3, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9184),
                            Detail = "Detail for invoice 3 (5)",
                            DueDate = new DateTime(2023, 4, 13, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9186),
                            EmployeeId = 2,
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (5)",
                            PaymentTime = new DateTime(2023, 4, 11, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(9186),
                            RenterId = 3,
                            Status = true,
                            TotalAmount = 0m
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceholderForFeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PlaceholderForFeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            InvoiceDetailId = 1,
                            Amount = 0m,
                            InvoiceId = 1,
                            Price = 0m,
                            ServiceId = 1
                        },
                        new
                        {
                            InvoiceDetailId = 2,
                            Amount = 0m,
                            InvoiceId = 1,
                            Price = 0m,
                            ServiceId = 2
                        },
                        new
                        {
                            InvoiceDetailId = 3,
                            Amount = 0m,
                            InvoiceId = 1,
                            Price = 0m
                        },
                        new
                        {
                            InvoiceDetailId = 4,
                            Amount = 0m,
                            InvoiceId = 2,
                            Price = 0m
                        },
                        new
                        {
                            InvoiceDetailId = 5,
                            Amount = 0m,
                            InvoiceId = 4,
                            Price = 0m,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 6,
                            Amount = 0m,
                            InvoiceId = 4,
                            Price = 0m,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 7,
                            Amount = 0m,
                            InvoiceId = 5,
                            Price = 0m,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 8,
                            Amount = 0m,
                            InvoiceId = 5,
                            Price = 0m,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 9,
                            Amount = 0m,
                            InvoiceId = 5,
                            Price = 0m,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 10,
                            Amount = 0m,
                            InvoiceId = 6,
                            Price = 0m,
                            ServiceId = 6
                        },
                        new
                        {
                            InvoiceDetailId = 11,
                            Amount = 0m,
                            InvoiceId = 6,
                            Price = 0m,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 12,
                            Amount = 0m,
                            InvoiceId = 6,
                            Price = 0m,
                            ServiceId = 6
                        },
                        new
                        {
                            InvoiceDetailId = 13,
                            Amount = 0m,
                            InvoiceId = 7,
                            Price = 0m,
                            ServiceId = 3
                        },
                        new
                        {
                            InvoiceDetailId = 14,
                            Amount = 0m,
                            InvoiceId = 7,
                            Price = 0m,
                            ServiceId = 3
                        },
                        new
                        {
                            InvoiceDetailId = 15,
                            Amount = 0m,
                            InvoiceId = 7,
                            Price = 0m,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 16,
                            Amount = 0m,
                            InvoiceId = 7,
                            Price = 0m,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceTypeId"), 1L, 1);

                    b.Property<string>("InvoiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceTypes");

                    b.HasData(
                        new
                        {
                            InvoiceTypeId = 1,
                            InvoiceTypeName = "Thu",
                            Status = true
                        },
                        new
                        {
                            InvoiceTypeId = 2,
                            InvoiceTypeName = "Chi",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.MetricHistory", b =>
                {
                    b.Property<int>("MetricHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetricHistoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ElectricityMeterAfter")
                        .HasColumnType("int");

                    b.Property<int?>("ElectricityMeterBefore")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WaterMeterAfter")
                        .HasColumnType("int");

                    b.Property<int?>("WaterMeterBefore")
                        .HasColumnType("int");

                    b.HasKey("MetricHistoryId");

                    b.HasIndex("FlatId");

                    b.ToTable("MetricHistories");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionStatusColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.PlaceholderForFee", b =>
                {
                    b.Property<int>("PlaceholderForFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceholderForFeeId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ContractServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("PlaceholderForFeeId");

                    b.ToTable("PlaceholderForFee");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Property<int>("RenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenCardBackImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenCardFrontImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RenterId");

                    b.ToTable("Renters");

                    b.HasData(
                        new
                        {
                            RenterId = 1,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3171),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "renter1@mail.com",
                            FullName = "Nguyen Van A",
                            Gender = "Male",
                            Password = "renter1",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "renter1"
                        },
                        new
                        {
                            RenterId = 2,
                            Address = "Hue",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3178),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "renter2@mail.com",
                            FullName = "Nguyen Van B",
                            Gender = "Male",
                            Password = "renter2",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "renter2"
                        },
                        new
                        {
                            RenterId = 3,
                            Address = "DN",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3181),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "renter3@mail.com",
                            FullName = "Nguyen Van C",
                            Gender = "Female",
                            Password = "renter3",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "renter3"
                        },
                        new
                        {
                            RenterId = 4,
                            Address = "HN",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3183),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "renter4@mail.com",
                            FullName = "Nguyen Van D",
                            Gender = "Female",
                            Password = "renter4",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "renter4"
                        },
                        new
                        {
                            RenterId = 5,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3185),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "trankhaimnhkhoi10a3@mail.com",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            Password = "123456789",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "minhkhoi10a3"
                        },
                        new
                        {
                            RenterId = 6,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3187),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "trankhaimnhkhoi@mail.com",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            Password = "123456789",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "minhkhoi"
                        },
                        new
                        {
                            RenterId = 7,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 5, 25, 22, 12, 47, 38, DateTimeKind.Utc).AddTicks(3189),
                            CitizenCardBackImageUrl = "ewqe",
                            CitizenCardFrontImageUrl = "Ewqea",
                            CitizenNumber = "3214324523",
                            Email = "khoitkmse150850@fpt",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            Password = "123456789",
                            PhoneNumber = "0123543125",
                            Status = true,
                            Username = "minhkhoitkm"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin",
                            Status = false
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Supervisor",
                            Status = false
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Technician",
                            Status = false
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<decimal>("ElectricityAttribute")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<string>("RoomImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomImageUrl5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomImageUrl6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WaterAttribute")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoomId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            AvailableSlots = 5,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            FlatId = 1,
                            RoomName = "VF-02",
                            RoomTypeId = 1,
                            Status = "Active",
                            WaterAttribute = 1m
                        },
                        new
                        {
                            RoomId = 2,
                            AvailableSlots = 5,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            FlatId = 2,
                            RoomName = "VLA-203",
                            RoomTypeId = 2,
                            Status = "Active",
                            WaterAttribute = 1m
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<decimal>("ElectricityAttribute")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<decimal>("WaterAttribute")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            RoomTypeId = 1,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            RoomTypeName = "Room 1 with 4 slots",
                            Status = "Ok",
                            TotalSlot = 4,
                            WaterAttribute = 1m
                        },
                        new
                        {
                            RoomTypeId = 2,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            RoomTypeName = "Room 2 for 5 slots",
                            Status = "Active",
                            TotalSlot = 5,
                            WaterAttribute = 1m
                        },
                        new
                        {
                            RoomTypeId = 3,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            RoomTypeName = "Room 3 for 6 slots",
                            Status = "Active",
                            TotalSlot = 5,
                            WaterAttribute = 1m
                        },
                        new
                        {
                            RoomTypeId = 4,
                            BuildingId = 3,
                            ElectricityAttribute = 1m,
                            RoomTypeName = "Room 4 for 6 slots",
                            Status = "Maintaince",
                            TotalSlot = 0,
                            WaterAttribute = 1m
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            BuildingId = 2,
                            Description = "Cung cấp nước 1",
                            Name = "Lau dọn phòng",
                            Price = 0m,
                            ServiceTypeId = 1,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 2,
                            BuildingId = 1,
                            Description = "Cung cấp nước 2 ",
                            Name = "Thay cầu nước",
                            Price = 0m,
                            ServiceTypeId = 1,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 3,
                            BuildingId = 3,
                            Description = "Cung cấp nước 3",
                            Name = "Khai thanh toán",
                            Price = 0m,
                            ServiceTypeId = 3,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 4,
                            BuildingId = 3,
                            Description = "Cung cấp 4 cho toa nha 3",
                            Name = "Xe đưa đón",
                            Price = 0m,
                            ServiceTypeId = 2,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 5,
                            BuildingId = 3,
                            Description = "Cung cấp 5 cho toa nha 3",
                            Name = "Dọn dẹp",
                            Price = 0m,
                            ServiceTypeId = 2,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 6,
                            BuildingId = 3,
                            Description = "Cung cấp 6 cho toa nha 3",
                            Name = "Chuyển vat tu",
                            Price = 0m,
                            ServiceTypeId = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            BuildingId = 3,
                            Name = "Nước",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            BuildingId = 3,
                            Name = "Gas",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            BuildingId = 2,
                            Name = "Điện",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            BuildingId = 2,
                            Name = "Còn lại",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<string>("CancelledReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SolveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TicketId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8945),
                            Description = "Sự cố 1",
                            EmployeeId = 2,
                            Status = "Active",
                            TicketName = "Ticket của renter 3 sự cố 1",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8947),
                            Description = "Sự cố 2",
                            EmployeeId = 2,
                            Status = "Processing",
                            TicketName = "Ticket của renter 3 sự cố 2",
                            TicketTypeId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8949),
                            Description = "Sự cố 3",
                            EmployeeId = 2,
                            Status = "Confirming",
                            TicketName = "Ticket của renter 3 sự cố 3",
                            TicketTypeId = 3
                        },
                        new
                        {
                            TicketId = 4,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8950),
                            Description = "Sự cố 4",
                            EmployeeId = 2,
                            Status = "Solved",
                            TicketName = "Ticket của renter 3 sự cố 4",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketId = 5,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8951),
                            Description = "Sự cố 1",
                            EmployeeId = 2,
                            Status = "Active",
                            TicketName = "Ticket của renter 3 sự cố 5",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketId = 6,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8952),
                            Description = "Sự cố 2",
                            EmployeeId = 2,
                            Status = "Processing",
                            TicketName = "Ticket của renter 3 sự cố 6",
                            TicketTypeId = 2
                        },
                        new
                        {
                            TicketId = 7,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8953),
                            Description = "Sự cố 3",
                            EmployeeId = 2,
                            Status = "Confirming",
                            TicketName = "Ticket 7 test",
                            TicketTypeId = 3
                        },
                        new
                        {
                            TicketId = 8,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 5, 25, 22, 12, 47, 41, DateTimeKind.Utc).AddTicks(8988),
                            Description = "Sự cố 4",
                            EmployeeId = 2,
                            SolveDate = new DateTime(2023, 5, 19, 5, 12, 47, 41, DateTimeKind.Local).AddTicks(8990),
                            Status = "Solved",
                            TicketName = "Ticket 8 esting",
                            TicketTypeId = 1
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketTypeId");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            TicketTypeId = 1,
                            Description = "Sự cố",
                            Status = true,
                            TicketTypeName = "Sự cố"
                        },
                        new
                        {
                            TicketTypeId = 2,
                            Description = "Bảo trì",
                            Status = true,
                            TicketTypeName = "Bảo trì"
                        },
                        new
                        {
                            TicketTypeId = 3,
                            Description = "Phàn nàn",
                            Status = true,
                            TicketTypeName = "Phàn nàn"
                        },
                        new
                        {
                            TicketTypeId = 4,
                            Description = "Khác",
                            Status = true,
                            TicketTypeName = "Khác"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.Property<int>("UserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDeviceId"), 1L, 1);

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserDeviceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserDevice", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UtilitiesRoom", b =>
                {
                    b.Property<int>("UtilitiesRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilitiesRoomId"), 1L, 1);

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UtilityId")
                        .HasColumnType("int");

                    b.HasKey("UtilitiesRoomId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UtilityId");

                    b.ToTable("UtilitiesRoom");

                    b.HasData(
                        new
                        {
                            UtilitiesRoomId = 1,
                            RoomId = 1,
                            UtilityId = 1
                        },
                        new
                        {
                            UtilitiesRoomId = 2,
                            RoomId = 2,
                            UtilityId = 2
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Utility", b =>
                {
                    b.Property<int>("UtilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilityId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilitiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilityImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilityImageUrl2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilityImageUrl3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilityImageUrl4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilityId");

                    b.ToTable("Utility");

                    b.HasData(
                        new
                        {
                            UtilityId = 1,
                            UtilitiesName = "Air Conditioner"
                        },
                        new
                        {
                            UtilityId = 2,
                            UtilitiesName = "Water Heater"
                        },
                        new
                        {
                            UtilityId = 3,
                            UtilitiesName = "Wifi"
                        },
                        new
                        {
                            UtilityId = 4,
                            UtilitiesName = "Kitchen"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WalletID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    b.HasKey("WalletId");

                    b.HasIndex("RenterId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTypeId"), 1L, 1);

                    b.Property<string>("WalletTypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("WalletType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Employee", "Employee")
                        .WithMany("Building")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("Contracts")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Contracts")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Employee", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.FeedbackType", "FeedbackType")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany()
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackType");

                    b.Navigation("Flat");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.FlatType", "FlatType")
                        .WithMany("Flats")
                        .HasForeignKey("FlatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("FlatType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.EntitiesForManagement.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Invoices")
                        .HasForeignKey("RenterId");

                    b.Navigation("Contract");

                    b.Navigation("Employee");

                    b.Navigation("InvoiceType");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.PlaceholderForFee", "PlaceholderForFee")
                        .WithMany()
                        .HasForeignKey("PlaceholderForFeeId");

                    b.HasOne("Domain.EntitiesForManagement.ServiceEntity", "Service")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Invoice");

                    b.Navigation("PlaceholderForFee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.MetricHistory", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("MetricHistories")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Notif__10216507");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Room", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("Rooms")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.ServiceType", "ServiceType")
                        .WithMany("ServiceEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Contract", "Contract")
                        .WithMany("Tickets")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Employee");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Employee", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UtilitiesRoom", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Utility", "Utility")
                        .WithMany("UtilitiesRooms")
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Utility");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.WalletType", "WalletType")
                        .WithMany()
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Employee", b =>
                {
                    b.Navigation("Building");

                    b.Navigation("Invoices");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("MetricHistories");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Navigation("ServiceEntities");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Utility", b =>
                {
                    b.Navigation("UtilitiesRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
