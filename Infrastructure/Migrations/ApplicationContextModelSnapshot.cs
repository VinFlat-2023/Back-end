// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Email = "superadmin@mail",
                            Password = "superadmin",
                            Phone = "0123543125",
                            RoleId = 1,
                            Status = true,
                            Username = "superadmin"
                        },
                        new
                        {
                            AccountId = 2,
                            Email = "admin@mail",
                            Password = "admin",
                            Phone = "0123543532",
                            RoleId = 2,
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            AccountId = 3,
                            Email = "supervisor@mail",
                            Password = "supervisor",
                            Phone = "0123543554",
                            RoleId = 3,
                            Status = true,
                            Username = "supervisor"
                        },
                        new
                        {
                            AccountId = 4,
                            Email = "employee1@mail",
                            Password = "employee1",
                            Phone = "0123543235",
                            RoleId = 4,
                            Status = true,
                            Username = "employee1"
                        },
                        new
                        {
                            AccountId = 5,
                            Email = "employee2@mail",
                            Password = "employee2",
                            Phone = "0123123235",
                            RoleId = 4,
                            Status = true,
                            Username = "employee2"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            Location = "HCM",
                            Name = "HCM",
                            Status = true
                        },
                        new
                        {
                            AreaId = 2,
                            Location = "HN",
                            Name = "HN",
                            Status = true
                        },
                        new
                        {
                            AreaId = 3,
                            Location = "DN",
                            Name = "DN",
                            Status = true
                        },
                        new
                        {
                            AreaId = 4,
                            Location = "Hue",
                            Name = "Hue",
                            Status = true
                        },
                        new
                        {
                            AreaId = 5,
                            Location = "TH",
                            Name = "Thanh Hoa",
                            Status = true
                        },
                        new
                        {
                            AreaId = 6,
                            Location = "HP",
                            Name = "Hai Phong",
                            Status = true
                        },
                        new
                        {
                            AreaId = 7,
                            Location = "DN",
                            Name = "Dong Nai",
                            Status = true
                        },
                        new
                        {
                            AreaId = 8,
                            Location = "HN",
                            Name = "Hoa Lac",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoordinateX")
                        .HasColumnType("int");

                    b.Property<int>("CoordinateY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalFloor")
                        .HasColumnType("int");

                    b.Property<int>("TotalRooms")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("AreaId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            AccountId = 0,
                            AreaId = 1,
                            BuildingName = "Building 1a",
                            CoordinateX = 231,
                            CoordinateY = 324,
                            Description = "Building 1a",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 2,
                            AccountId = 0,
                            AreaId = 1,
                            BuildingName = "Building 1b",
                            CoordinateX = 21233,
                            CoordinateY = 334,
                            Description = "Building 1b",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 3,
                            AccountId = 0,
                            AreaId = 2,
                            BuildingName = "Building 1c",
                            CoordinateX = 423,
                            CoordinateY = 3214,
                            Description = "Building 1c",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 4,
                            AccountId = 0,
                            AreaId = 2,
                            BuildingName = "Building 1d",
                            CoordinateX = 2323,
                            CoordinateY = 314,
                            Description = "Building 1d",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 5,
                            AccountId = 0,
                            AreaId = 3,
                            BuildingName = "Building 1e",
                            CoordinateX = 23431,
                            CoordinateY = 3245,
                            Description = "Building 1e",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 6,
                            AccountId = 0,
                            AreaId = 3,
                            BuildingName = "Building 1f",
                            CoordinateX = 21233,
                            CoordinateY = 334,
                            Description = "Building 1f",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 7,
                            AccountId = 0,
                            AreaId = 4,
                            BuildingName = "Building 1g",
                            CoordinateX = 423,
                            CoordinateY = 3214,
                            Description = "Building 1g",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        },
                        new
                        {
                            BuildingId = 8,
                            AccountId = 0,
                            AreaId = 4,
                            BuildingName = "Building 1h",
                            CoordinateX = 2323,
                            CoordinateY = 31454,
                            Description = "Building 1h",
                            Status = true,
                            TotalFloor = 10,
                            TotalRooms = 20
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"), 1L, 1);

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FlatId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("FlatId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ContractHistory", b =>
                {
                    b.Property<int>("ContractHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractHistoryId"), 1L, 1);

                    b.Property<DateTime?>("ContractExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractHistoryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.HasKey("ContractHistoryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("RenterId");

                    b.ToTable("ContractHistories");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.DatabaseException", b =>
                {
                    b.Property<long>("ExceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExceptionId"), 1L, 1);

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuplicateCount")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorHash")
                        .HasColumnType("int");

                    b.Property<string>("FullJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExceptionId");

                    b.ToTable("DatabaseExceptions");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RenterId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Property<int>("FeedbackTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackTypeId");

                    b.ToTable("FeedbackTypes");

                    b.HasData(
                        new
                        {
                            FeedbackTypeId = 1,
                            Name = "Complaint"
                        },
                        new
                        {
                            FeedbackTypeId = 2,
                            Name = "Suggestion"
                        },
                        new
                        {
                            FeedbackTypeId = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Property<int>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectricityMeter")
                        .HasColumnType("int");

                    b.Property<int>("FlatTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WaterMeter")
                        .HasColumnType("int");

                    b.HasKey("FlatId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FlatTypeId");

                    b.ToTable("Flats");

                    b.HasData(
                        new
                        {
                            FlatId = 1,
                            BuildingId = 1,
                            Description = "Flat 1",
                            ElectricityMeter = 0,
                            FlatTypeId = 1,
                            Name = "Flat 1",
                            Status = "Active",
                            WaterMeter = 0
                        },
                        new
                        {
                            FlatId = 2,
                            BuildingId = 3,
                            Description = "Flat 2",
                            ElectricityMeter = 0,
                            FlatTypeId = 3,
                            Name = "Flat 2",
                            Status = "Active",
                            WaterMeter = 0
                        },
                        new
                        {
                            FlatId = 3,
                            BuildingId = 2,
                            Description = "Flat 3",
                            ElectricityMeter = 0,
                            FlatTypeId = 2,
                            Name = "Flat 3",
                            Status = "Active",
                            WaterMeter = 0
                        },
                        new
                        {
                            FlatId = 4,
                            BuildingId = 2,
                            Description = "Flat 4",
                            ElectricityMeter = 0,
                            FlatTypeId = 5,
                            Name = "Flat 4",
                            Status = "NonActive",
                            WaterMeter = 0
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Property<int>("FlatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatTypeId"), 1L, 1);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlatTypeId");

                    b.ToTable("FlatTypes");

                    b.HasData(
                        new
                        {
                            FlatTypeId = 1,
                            Capacity = 10,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 2,
                            Capacity = 2,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 3,
                            Capacity = 4,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 4,
                            Capacity = 5,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 5,
                            Capacity = 6,
                            Status = "NonActive"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("PaymentPeriod")
                        .HasColumnType("time");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("RenterId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceTypeId"), 1L, 1);

                    b.Property<string>("InvoiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("MajorId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Majors");

                    b.HasData(
                        new
                        {
                            MajorId = 1,
                            Name = "Computer Science",
                            UniversityId = 1
                        },
                        new
                        {
                            MajorId = 2,
                            Name = "Information Technology",
                            UniversityId = 1
                        },
                        new
                        {
                            MajorId = 3,
                            Name = "Software Engineering",
                            UniversityId = 2
                        },
                        new
                        {
                            MajorId = 4,
                            Name = "Information Technology",
                            UniversityId = 2
                        },
                        new
                        {
                            MajorId = 5,
                            Name = "Information Technology",
                            UniversityId = 3
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionStatusColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Property<int>("RenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RenterId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MajorId")
                        .IsUnique()
                        .HasFilter("[MajorId] IS NOT NULL");

                    b.HasIndex("UniversityId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Renters");

                    b.HasData(
                        new
                        {
                            RenterId = 1,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 2, 11, 7, 42, 27, 706, DateTimeKind.Utc).AddTicks(3455),
                            CitizenNumber = "3214324523",
                            DeviceToken = "12321fdsg45adsa",
                            Email = "renter1@mail",
                            FullName = "Nguyen Van A",
                            Gender = "Male",
                            Password = "renter1",
                            Phone = "0123543125",
                            Status = true,
                            Username = "renter1"
                        },
                        new
                        {
                            RenterId = 2,
                            Address = "Hue",
                            BirthDate = new DateTime(2023, 2, 11, 7, 42, 27, 706, DateTimeKind.Utc).AddTicks(3461),
                            CitizenNumber = "3214324523",
                            DeviceToken = "dsavvf",
                            Email = "renter2@mail",
                            FullName = "Nguyen Van B",
                            Gender = "Male",
                            Password = "renter2",
                            Phone = "0123543125",
                            Status = true,
                            Username = "renter2"
                        },
                        new
                        {
                            RenterId = 3,
                            Address = "DN",
                            BirthDate = new DateTime(2023, 2, 11, 7, 42, 27, 706, DateTimeKind.Utc).AddTicks(3464),
                            CitizenNumber = "3214324523",
                            DeviceToken = "123221ad145ad423sa",
                            Email = "renter3@mail",
                            FullName = "Nguyen Van C",
                            Gender = "Female",
                            MajorId = 2,
                            Password = "renter3",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "renter3"
                        },
                        new
                        {
                            RenterId = 4,
                            Address = "HN",
                            BirthDate = new DateTime(2023, 2, 11, 7, 42, 27, 706, DateTimeKind.Utc).AddTicks(3466),
                            CitizenNumber = "3214324523",
                            DeviceToken = "ewasdv12344",
                            Email = "renter4@mail",
                            FullName = "Nguyen Van D",
                            Gender = "Female",
                            MajorId = 1,
                            Password = "renter4",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "renter4"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "SuperAdmin",
                            Status = true
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Admin",
                            Status = true
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Supervisor",
                            Status = true
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Employee",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            Name = "Water Supply",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            Name = "Gas Supply",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            Name = "Electricity Supply",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            Name = "Other",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SolveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RenterId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("TicketTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            TicketTypeId = 1,
                            Description = "Repair",
                            Name = "Repair",
                            Status = true
                        },
                        new
                        {
                            TicketTypeId = 2,
                            Description = "Maintenance",
                            Name = "Maintenance",
                            Status = true
                        },
                        new
                        {
                            TicketTypeId = 3,
                            Description = "Other",
                            Name = "Other",
                            Status = true
                        },
                        new
                        {
                            TicketTypeId = 4,
                            Description = "Complaint",
                            Name = "Complaint",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TpTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("University");

                    b.HasData(
                        new
                        {
                            UniversityId = 1,
                            Address = "HCM",
                            Description = "HCM University of Technology",
                            Status = "Active",
                            UniversityName = "HCM University of Technology"
                        },
                        new
                        {
                            UniversityId = 2,
                            Address = "HCM",
                            Description = "HCM University of Science",
                            Status = "Active",
                            UniversityName = "HCM University of Science"
                        },
                        new
                        {
                            UniversityId = 3,
                            Address = "HCM",
                            Description = "HCM University of Pedagogy",
                            Status = "Active",
                            UniversityName = "HCM University of Pedagogy"
                        },
                        new
                        {
                            UniversityId = 4,
                            Address = "HCM",
                            Description = "HCM University of Physical",
                            Status = "Active",
                            UniversityName = "HCM University of Physical"
                        },
                        new
                        {
                            UniversityId = 5,
                            Address = "HCM",
                            Description = "HCM University of Math",
                            Status = "Active",
                            UniversityName = "HCM University of Math"
                        },
                        new
                        {
                            UniversityId = 6,
                            Address = "HCM",
                            Description = "HCM University of History",
                            Status = "Active",
                            UniversityName = "HCM University of History"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.Property<int>("UserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDeviceId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserDeviceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RenterId");

                    b.ToTable("UserDevice", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WalletID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    b.HasKey("WalletId");

                    b.HasIndex("RenterId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTypeId"), 1L, 1);

                    b.Property<string>("WalletTypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("WalletType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", null)
                        .WithMany("Contracts")
                        .HasForeignKey("FlatId");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ContractHistory", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Contract", "Contract")
                        .WithMany("ContractHistories")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("ContractHistories")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.FeedbackType", "FeedbackType")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("FeedBacks")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackType");

                    b.Navigation("Flat");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.FlatType", "FlatType")
                        .WithMany("Flats")
                        .HasForeignKey("FlatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("FlatType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Invoices")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("InvoiceType");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.ServiceEntity", "Service")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Ticket", null)
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("TicketId");

                    b.Navigation("Invoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.University", "University")
                        .WithMany("Majors")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Notif__10216507");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Major", "Major")
                        .WithOne("Renter")
                        .HasForeignKey("Domain.EntitiesForManagement.Renter", "MajorId");

                    b.HasOne("Domain.EntitiesForManagement.University", "University")
                        .WithMany("Renters")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Major");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.ServiceType", "ServiceType")
                        .WithMany("ServiceEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId");

                    b.Navigation("Account");

                    b.Navigation("Renter");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Transaction", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("AccountId");

                    b.HasOne("Domain.EntitiesForManagement.Renter", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("RenterId");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.WalletType", "WalletType")
                        .WithMany()
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Navigation("ContractHistories");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("FeedBacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Navigation("ContractHistories");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Navigation("ServiceEntities");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.University", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("Renters");
                });
#pragma warning restore 612, 618
        }
    }
}
