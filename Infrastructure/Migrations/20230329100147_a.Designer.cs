// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230329100147_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Email = "superadmin@mail",
                            FullName = "Super admin account",
                            Password = "superadmin",
                            Phone = "0123543125",
                            RoleId = 1,
                            Status = true,
                            Username = "superadmin"
                        },
                        new
                        {
                            AccountId = 2,
                            Email = "admin@mail",
                            FullName = "Admin account",
                            Password = "admin",
                            Phone = "0123543532",
                            RoleId = 2,
                            Status = true,
                            Username = "admin"
                        },
                        new
                        {
                            AccountId = 3,
                            Email = "supervisor@mail",
                            FullName = "Supervisor account",
                            Password = "supervisor",
                            Phone = "0123543554",
                            RoleId = 3,
                            Status = true,
                            Username = "supervisor"
                        },
                        new
                        {
                            AccountId = 4,
                            Email = "employee1@mail",
                            FullName = "Employee account 1",
                            Password = "employee1",
                            Phone = "0123543235",
                            RoleId = 4,
                            Status = true,
                            Username = "employee1"
                        },
                        new
                        {
                            AccountId = 5,
                            Email = "employee2@mail",
                            FullName = "Employee account 2",
                            Password = "employee2",
                            Phone = "0123123235",
                            RoleId = 4,
                            Status = true,
                            Username = "employee2"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            Location = "HCM",
                            Name = "HCM",
                            Status = true
                        },
                        new
                        {
                            AreaId = 2,
                            Location = "HN",
                            Name = "HN",
                            Status = true
                        },
                        new
                        {
                            AreaId = 3,
                            Location = "DN",
                            Name = "DN",
                            Status = true
                        },
                        new
                        {
                            AreaId = 4,
                            Location = "Hue",
                            Name = "Hue",
                            Status = true
                        },
                        new
                        {
                            AreaId = 5,
                            Location = "TH",
                            Name = "Thanh Hoa",
                            Status = true
                        },
                        new
                        {
                            AreaId = 6,
                            Location = "HP",
                            Name = "Hai Phong",
                            Status = true
                        },
                        new
                        {
                            AreaId = 7,
                            Location = "DN",
                            Name = "Dong Nai",
                            Status = true
                        },
                        new
                        {
                            AreaId = 8,
                            Location = "HN",
                            Name = "Hoa Lac",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.AttributeForNumeric", b =>
                {
                    b.Property<int>("AttributeForNumericId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeForNumericId"), 1L, 1);

                    b.Property<string>("ElectricityAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeForNumericId");

                    b.ToTable("AttributeForNumerics");

                    b.HasData(
                        new
                        {
                            AttributeForNumericId = 1,
                            ElectricityAttribute = "1.1",
                            WaterAttribute = "1"
                        },
                        new
                        {
                            AttributeForNumericId = 2,
                            ElectricityAttribute = "0.9",
                            WaterAttribute = "1"
                        },
                        new
                        {
                            AttributeForNumericId = 3,
                            ElectricityAttribute = "1.2",
                            WaterAttribute = "1"
                        },
                        new
                        {
                            AttributeForNumericId = 4,
                            ElectricityAttribute = "1.4",
                            WaterAttribute = "0.9"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CoordinateX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CoordinateY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalRooms")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AreaId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            AccountId = 5,
                            AreaId = 1,
                            BuildingAddress = "Quajan 9",
                            BuildingName = "Building 1a",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 231m,
                            CoordinateY = 324m,
                            Description = "Building 1a",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        },
                        new
                        {
                            BuildingId = 2,
                            AccountId = 2,
                            AreaId = 1,
                            BuildingAddress = "Quận 9",
                            BuildingName = "Building 1b",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 21233m,
                            CoordinateY = 334m,
                            Description = "Building 1b",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        },
                        new
                        {
                            BuildingId = 3,
                            AccountId = 2,
                            AreaId = 2,
                            BuildingAddress = "Quận 2",
                            BuildingName = "Building 1c",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 423m,
                            CoordinateY = 3214m,
                            Description = "Building 1c",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        },
                        new
                        {
                            BuildingId = 4,
                            AccountId = 4,
                            AreaId = 2,
                            BuildingAddress = "Quận 3",
                            BuildingName = "Building 1d",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 2323m,
                            CoordinateY = 314m,
                            Description = "Building 1d",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        },
                        new
                        {
                            BuildingId = 5,
                            AccountId = 3,
                            AreaId = 3,
                            BuildingAddress = "Quận 4",
                            BuildingName = "Building 1e",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 23431m,
                            CoordinateY = 3245m,
                            Description = "Building 1e",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        },
                        new
                        {
                            BuildingId = 6,
                            AccountId = 4,
                            AreaId = 3,
                            BuildingAddress = "Quận 7",
                            BuildingName = "Building 1f",
                            BuildingPhoneNumber = "012323123",
                            CoordinateX = 21233m,
                            CoordinateY = 334m,
                            Description = "Building 1f",
                            ImageUrl = "",
                            Status = true,
                            TotalRooms = 0
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<decimal>("PriceForElectricity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForService")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForWater")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RenterId");

                    b.ToTable("Contracts", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            ContractId = 1,
                            BuildingId = 1,
                            ContractName = "Contract for renter 1",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 27, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3095),
                            Description = "Contract description for renter 1",
                            FlatId = 2,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3103),
                            PriceForElectricity = 0m,
                            PriceForRent = 1800000m,
                            PriceForService = 0m,
                            PriceForWater = 0m,
                            RenterId = 1,
                            RoomId = 1,
                            StartDate = new DateTime(2023, 3, 4, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3101)
                        },
                        new
                        {
                            ContractId = 2,
                            BuildingId = 2,
                            ContractName = "Contract for renter 2",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 28, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3106),
                            Description = "Contract description for renter 2",
                            FlatId = 3,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3106),
                            PriceForElectricity = 0m,
                            PriceForRent = 2800000m,
                            PriceForService = 0m,
                            PriceForWater = 0m,
                            RenterId = 2,
                            RoomId = 1,
                            StartDate = new DateTime(2023, 3, 2, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3106)
                        },
                        new
                        {
                            ContractId = 3,
                            BuildingId = 3,
                            ContractName = "Contract for renter 3",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 28, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3108),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3109),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 3, 2, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3108)
                        },
                        new
                        {
                            ContractId = 4,
                            BuildingId = 3,
                            ContractName = "Contract for renter 3 (2)",
                            ContractStatus = "Active",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 28, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3111),
                            Description = "Contract description for renter 3",
                            FlatId = 4,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3112),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 1,
                            StartDate = new DateTime(2023, 3, 2, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3111)
                        },
                        new
                        {
                            ContractId = 5,
                            BuildingId = 3,
                            ContractName = "Contract for renter 3 (3)",
                            ContractStatus = "Inactive",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 28, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3113),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3114),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 3, 2, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3113)
                        },
                        new
                        {
                            ContractId = 6,
                            BuildingId = 3,
                            ContractName = "Contract for renter 3 (4)",
                            ContractStatus = "Inactive",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2023, 2, 28, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3115),
                            Description = "Contract description for renter 3",
                            FlatId = 3,
                            ImageUrl = "No image",
                            LastUpdated = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3116),
                            PriceForElectricity = 120m,
                            PriceForRent = 2800000m,
                            PriceForService = 10000m,
                            PriceForWater = 1000m,
                            RenterId = 3,
                            RoomId = 2,
                            StartDate = new DateTime(2023, 3, 2, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3116)
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RenterId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Property<int>("FeedbackTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackTypeId");

                    b.ToTable("FeedbackTypes");

                    b.HasData(
                        new
                        {
                            FeedbackTypeId = 1,
                            Name = "Rating"
                        },
                        new
                        {
                            FeedbackTypeId = 2,
                            Name = "Suggestion"
                        },
                        new
                        {
                            FeedbackTypeId = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Property<int>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatId"), 1L, 1);

                    b.Property<int>("AttributeForNumericId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableRoom")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectricityMeterAfter")
                        .HasColumnType("int");

                    b.Property<int?>("ElectricityMeterBefore")
                        .HasColumnType("int");

                    b.Property<int>("FlatTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoom")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WaterMeterAfter")
                        .HasColumnType("int");

                    b.Property<int?>("WaterMeterBefore")
                        .HasColumnType("int");

                    b.HasKey("FlatId");

                    b.HasIndex("AttributeForNumericId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FlatTypeId");

                    b.ToTable("Flats");

                    b.HasData(
                        new
                        {
                            FlatId = 1,
                            AttributeForNumericId = 4,
                            AvailableRoom = 0,
                            BuildingId = 1,
                            Description = "Flat 1",
                            ElectricityMeterAfter = 0,
                            ElectricityMeterBefore = 0,
                            FlatTypeId = 1,
                            MaxRoom = 0,
                            Name = "Flat 1",
                            Status = "Active",
                            WaterMeterAfter = 0,
                            WaterMeterBefore = 0
                        },
                        new
                        {
                            FlatId = 2,
                            AttributeForNumericId = 3,
                            AvailableRoom = 0,
                            BuildingId = 3,
                            Description = "Flat 2",
                            ElectricityMeterAfter = 0,
                            ElectricityMeterBefore = 0,
                            FlatTypeId = 3,
                            MaxRoom = 0,
                            Name = "Flat 2",
                            Status = "Active",
                            WaterMeterAfter = 0,
                            WaterMeterBefore = 0
                        },
                        new
                        {
                            FlatId = 3,
                            AttributeForNumericId = 2,
                            AvailableRoom = 0,
                            BuildingId = 2,
                            Description = "Flat 3",
                            ElectricityMeterAfter = 0,
                            ElectricityMeterBefore = 0,
                            FlatTypeId = 2,
                            MaxRoom = 0,
                            Name = "Flat 3",
                            Status = "Active",
                            WaterMeterAfter = 0,
                            WaterMeterBefore = 0
                        },
                        new
                        {
                            FlatId = 4,
                            AttributeForNumericId = 1,
                            AvailableRoom = 0,
                            BuildingId = 2,
                            Description = "Flat 4",
                            ElectricityMeterAfter = 0,
                            ElectricityMeterBefore = 0,
                            FlatTypeId = 5,
                            MaxRoom = 0,
                            Name = "Flat 4",
                            Status = "NonActive",
                            WaterMeterAfter = 0,
                            WaterMeterBefore = 0
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Property<int>("FlatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FlatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlatTypeId");

                    b.ToTable("FlatTypes");

                    b.HasData(
                        new
                        {
                            FlatTypeId = 1,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 10,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 2,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 2,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 3,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 4,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 4,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 5,
                            Status = "Active"
                        },
                        new
                        {
                            FlatTypeId = 5,
                            BuildingId = 5,
                            FlatTypeName = "AAAAAAAA",
                            RoomCapacity = 6,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("RenterId");

                    b.ToTable("Invoices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            AccountId = 2,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3013),
                            Detail = "Detail for invoice 1",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 1",
                            RenterId = 1,
                            Status = true
                        },
                        new
                        {
                            InvoiceId = 2,
                            AccountId = 3,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3015),
                            Detail = "Detail for invoice 2",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 2",
                            RenterId = 2,
                            Status = true
                        },
                        new
                        {
                            InvoiceId = 3,
                            AccountId = 4,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3016),
                            Detail = "Detail for invoice 3",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3",
                            RenterId = 3,
                            Status = false
                        },
                        new
                        {
                            InvoiceId = 4,
                            AccountId = 2,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3018),
                            Detail = "Detail for invoice 3 (2)",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (2)",
                            RenterId = 3,
                            Status = false
                        },
                        new
                        {
                            InvoiceId = 5,
                            AccountId = 2,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3018),
                            Detail = "Detail for invoice 3 (3)",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (3)",
                            RenterId = 3,
                            Status = false
                        },
                        new
                        {
                            InvoiceId = 6,
                            AccountId = 2,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3019),
                            Detail = "Detail for invoice 3 (4)",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (4)",
                            RenterId = 3,
                            Status = true
                        },
                        new
                        {
                            InvoiceId = 7,
                            AccountId = 2,
                            Amount = 0,
                            CreatedTime = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(3020),
                            Detail = "Detail for invoice 3 (5)",
                            InvoiceTypeId = 1,
                            Name = "Hoá đơn điện tử cho renter 3 (5)",
                            RenterId = 3,
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceholderForFeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("WildcardIdForFee")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PlaceholderForFeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            InvoiceDetailId = 1,
                            Amount = 0m,
                            InvoiceId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            InvoiceDetailId = 2,
                            Amount = 0m,
                            InvoiceId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            InvoiceDetailId = 3,
                            Amount = 0m,
                            InvoiceId = 1
                        },
                        new
                        {
                            InvoiceDetailId = 4,
                            Amount = 0m,
                            InvoiceId = 2
                        },
                        new
                        {
                            InvoiceDetailId = 5,
                            Amount = 0m,
                            InvoiceId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 6,
                            Amount = 0m,
                            InvoiceId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 7,
                            Amount = 0m,
                            InvoiceId = 5,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 8,
                            Amount = 0m,
                            InvoiceId = 5,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 9,
                            Amount = 0m,
                            InvoiceId = 5,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 10,
                            Amount = 0m,
                            InvoiceId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            InvoiceDetailId = 11,
                            Amount = 0m,
                            InvoiceId = 6,
                            ServiceId = 5
                        },
                        new
                        {
                            InvoiceDetailId = 12,
                            Amount = 0m,
                            InvoiceId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            InvoiceDetailId = 13,
                            Amount = 0m,
                            InvoiceId = 7,
                            ServiceId = 3
                        },
                        new
                        {
                            InvoiceDetailId = 14,
                            Amount = 0m,
                            InvoiceId = 7,
                            ServiceId = 3
                        },
                        new
                        {
                            InvoiceDetailId = 15,
                            Amount = 0m,
                            InvoiceId = 7,
                            ServiceId = 4
                        },
                        new
                        {
                            InvoiceDetailId = 16,
                            Amount = 0m,
                            InvoiceId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceTypeId"), 1L, 1);

                    b.Property<int>("InvoiceTypeIdWildCard")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceTypes");

                    b.HasData(
                        new
                        {
                            InvoiceTypeId = 1,
                            InvoiceTypeIdWildCard = 1,
                            InvoiceTypeName = "Thu",
                            Status = true
                        },
                        new
                        {
                            InvoiceTypeId = 2,
                            InvoiceTypeIdWildCard = 2,
                            InvoiceTypeName = "Chi",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("MajorId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Majors");

                    b.HasData(
                        new
                        {
                            MajorId = 1,
                            Name = "Computer Science",
                            UniversityId = 1
                        },
                        new
                        {
                            MajorId = 2,
                            Name = "Information Technology",
                            UniversityId = 1
                        },
                        new
                        {
                            MajorId = 3,
                            Name = "Software Engineering",
                            UniversityId = 2
                        },
                        new
                        {
                            MajorId = 4,
                            Name = "Information Technology",
                            UniversityId = 2
                        },
                        new
                        {
                            MajorId = 5,
                            Name = "Information Technology",
                            UniversityId = 3
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionStatusColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"), 1L, 1);

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.PlaceholderForFee", b =>
                {
                    b.Property<int>("PlaceholderForFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceholderForFeeId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("PlaceholderForFeeId");

                    b.ToTable("PlaceholderForFee");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Property<int>("RenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RenterId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MajorId");

                    b.HasIndex("UniversityId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Renters");

                    b.HasData(
                        new
                        {
                            RenterId = 1,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2630),
                            CitizenNumber = "3214324523",
                            DeviceToken = "12321fdsg45adsa",
                            Email = "renter1@mail.com",
                            FullName = "Nguyen Van A",
                            Gender = "Male",
                            Password = "renter1",
                            Phone = "0123543125",
                            Status = true,
                            Username = "renter1"
                        },
                        new
                        {
                            RenterId = 2,
                            Address = "Hue",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2635),
                            CitizenNumber = "3214324523",
                            DeviceToken = "dsavvf",
                            Email = "renter2@mail.com",
                            FullName = "Nguyen Van B",
                            Gender = "Male",
                            Password = "renter2",
                            Phone = "0123543125",
                            Status = true,
                            Username = "renter2"
                        },
                        new
                        {
                            RenterId = 3,
                            Address = "DN",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2637),
                            CitizenNumber = "3214324523",
                            DeviceToken = "123221ad145ad423sa",
                            Email = "renter3@mail.com",
                            FullName = "Nguyen Van C",
                            Gender = "Female",
                            MajorId = 2,
                            Password = "renter3",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "renter3"
                        },
                        new
                        {
                            RenterId = 4,
                            Address = "HN",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2639),
                            CitizenNumber = "3214324523",
                            DeviceToken = "ewasdv12344",
                            Email = "renter4@mail.com",
                            FullName = "Nguyen Van D",
                            Gender = "Female",
                            MajorId = 1,
                            Password = "renter4",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "renter4"
                        },
                        new
                        {
                            RenterId = 5,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2641),
                            CitizenNumber = "3214324523",
                            DeviceToken = "ewasdv12344",
                            Email = "trankhaimnhkhoi10a3@mail.com",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            MajorId = 1,
                            Password = "123456789",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "minhkhoi10a3"
                        },
                        new
                        {
                            RenterId = 6,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2644),
                            CitizenNumber = "3214324523",
                            DeviceToken = "ewasdv12344",
                            Email = "trankhaimnhkhoi@mail.com",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            MajorId = 1,
                            Password = "123456789",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "minhkhoi"
                        },
                        new
                        {
                            RenterId = 7,
                            Address = "HCM",
                            BirthDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2645),
                            CitizenNumber = "3214324523",
                            DeviceToken = "ewasdv12344",
                            Email = "khoitkmse150850@fpt",
                            FullName = "Tran Minh Khoi",
                            Gender = "Male",
                            MajorId = 1,
                            Password = "123456789",
                            Phone = "0123543125",
                            Status = true,
                            UniversityId = 1,
                            Username = "minhkhoitkm"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "SuperAdmin",
                            Status = true
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Admin",
                            Status = true
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Supervisor",
                            Status = true
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Employee",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            AvailableSlots = 2,
                            FlatId = 1,
                            RoomName = "Room 1 for flat 1",
                            RoomTypeId = 1
                        },
                        new
                        {
                            RoomId = 2,
                            AvailableSlots = 1,
                            FlatId = 3,
                            RoomName = "Room 1 for flat 3",
                            RoomTypeId = 1
                        },
                        new
                        {
                            RoomId = 3,
                            AvailableSlots = 2,
                            FlatId = 3,
                            RoomName = "Room 2 for flat 3",
                            RoomTypeId = 2
                        },
                        new
                        {
                            RoomId = 4,
                            AvailableSlots = 2,
                            FlatId = 3,
                            RoomName = "Room 3 for flat 3",
                            RoomTypeId = 3
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSlots")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            RoomTypeId = 1,
                            BuildingId = 5,
                            Description = "Room type id 1 : 2 slots",
                            NumberOfSlots = 2,
                            RoomTypeName = "Room type id 1 : 2 slots"
                        },
                        new
                        {
                            RoomTypeId = 2,
                            BuildingId = 5,
                            Description = "Room type id 2 : 2 slots",
                            NumberOfSlots = 2,
                            RoomTypeName = "Room type id 2 : 2 slots"
                        },
                        new
                        {
                            RoomTypeId = 3,
                            BuildingId = 5,
                            Description = "Room type id 3 : 2 slots",
                            NumberOfSlots = 2,
                            RoomTypeName = "Room type id 3 : 2 slots"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            Amount = 0m,
                            BuildingId = 2,
                            Description = "Cung cấp nước 1",
                            Name = "Cung cấp nước 1",
                            ServiceTypeId = 1,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 2,
                            Amount = 0m,
                            BuildingId = 1,
                            Description = "Cung cấp nước 2 ",
                            Name = "Cung cấp nước 2",
                            ServiceTypeId = 1,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 3,
                            Amount = 0m,
                            BuildingId = 3,
                            Description = "Cung cấp nước 3",
                            Name = "Cung cấp nước 3",
                            ServiceTypeId = 3,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 4,
                            Amount = 0m,
                            BuildingId = 3,
                            Description = "Cung cấp 4 cho toa nha 3",
                            Name = "Cung cấp 4 cho toa nha 3",
                            ServiceTypeId = 2,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 5,
                            Amount = 0m,
                            BuildingId = 3,
                            Description = "Cung cấp 5 cho toa nha 3",
                            Name = "Cung cấp 5 cho toa nha 3",
                            ServiceTypeId = 2,
                            Status = true
                        },
                        new
                        {
                            ServiceId = 6,
                            Amount = 0m,
                            BuildingId = 3,
                            Description = "Cung cấp 6 cho toa nha 3",
                            Name = "Cung cấp 6 cho toa nha 3",
                            ServiceTypeId = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"), 1L, 1);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            BuildingId = 3,
                            Name = "Nước",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            BuildingId = 3,
                            Name = "Gas",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            BuildingId = 2,
                            Name = "Điện",
                            Status = "Active"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            BuildingId = 2,
                            Name = "Còn lại",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SolveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            AccountId = 2,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2935),
                            Description = "Sự cố 1",
                            Status = "Active",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            AccountId = 2,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2937),
                            Description = "Sự cố 2",
                            Status = "Processing",
                            TicketTypeId = 2
                        },
                        new
                        {
                            TicketId = 3,
                            AccountId = 2,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2938),
                            Description = "Sự cố 3",
                            Status = "Completed",
                            TicketTypeId = 3
                        },
                        new
                        {
                            TicketId = 4,
                            AccountId = 2,
                            ContractId = 3,
                            CreateDate = new DateTime(2023, 3, 29, 10, 1, 47, 142, DateTimeKind.Utc).AddTicks(2939),
                            Description = "Sự cố 4",
                            Status = "Active",
                            TicketTypeId = 1
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketTypeId");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            TicketTypeId = 1,
                            Description = "Sự cố",
                            Status = true,
                            TicketTypeName = "Sự cố"
                        },
                        new
                        {
                            TicketTypeId = 2,
                            Description = "Bảo trì",
                            Status = true,
                            TicketTypeName = "Bảo trì"
                        },
                        new
                        {
                            TicketTypeId = 3,
                            Description = "Phàn nàn",
                            Status = true,
                            TicketTypeName = "Phàn nàn"
                        },
                        new
                        {
                            TicketTypeId = 4,
                            Description = "Khác",
                            Status = true,
                            TicketTypeName = "Khác"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TpTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("University");

                    b.HasData(
                        new
                        {
                            UniversityId = 1,
                            Address = "HCM",
                            Description = "HCM University of Technology",
                            Status = "Active",
                            UniversityName = "HCM University of Technology"
                        },
                        new
                        {
                            UniversityId = 2,
                            Address = "HCM",
                            Description = "HCM University of Science",
                            Status = "Active",
                            UniversityName = "HCM University of Science"
                        },
                        new
                        {
                            UniversityId = 3,
                            Address = "HCM",
                            Description = "HCM University of Pedagogy",
                            Status = "Active",
                            UniversityName = "HCM University of Pedagogy"
                        },
                        new
                        {
                            UniversityId = 4,
                            Address = "HCM",
                            Description = "HCM University of Physical",
                            Status = "Active",
                            UniversityName = "HCM University of Physical"
                        },
                        new
                        {
                            UniversityId = 5,
                            Address = "HCM",
                            Description = "HCM University of Math",
                            Status = "Active",
                            UniversityName = "HCM University of Math"
                        },
                        new
                        {
                            UniversityId = 6,
                            Address = "HCM",
                            Description = "HCM University of History",
                            Status = "Active",
                            UniversityName = "HCM University of History"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.Property<int>("UserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDeviceId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserDeviceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RenterId");

                    b.ToTable("UserDevice", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UtilitiesFlat", b =>
                {
                    b.Property<int>("UtilitiesFlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilitiesFlatId"), 1L, 1);

                    b.Property<int>("FlatId")
                        .HasColumnType("int");

                    b.Property<int>("UtilityId")
                        .HasColumnType("int");

                    b.HasKey("UtilitiesFlatId");

                    b.HasIndex("FlatId");

                    b.HasIndex("UtilityId");

                    b.ToTable("UtilitiesFlat");

                    b.HasData(
                        new
                        {
                            UtilitiesFlatId = 1,
                            FlatId = 1,
                            UtilityId = 1
                        },
                        new
                        {
                            UtilitiesFlatId = 2,
                            FlatId = 1,
                            UtilityId = 2
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Utility", b =>
                {
                    b.Property<int>("UtilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilityId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilitiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilityId");

                    b.ToTable("Utility");

                    b.HasData(
                        new
                        {
                            UtilityId = 1,
                            UtilitiesName = "Air Conditioner"
                        },
                        new
                        {
                            UtilityId = 2,
                            UtilitiesName = "Water Heater"
                        },
                        new
                        {
                            UtilityId = 3,
                            UtilitiesName = "Wifi"
                        },
                        new
                        {
                            UtilityId = 4,
                            UtilitiesName = "Kitchen"
                        });
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WalletID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    b.HasKey("WalletId");

                    b.HasIndex("RenterId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTypeId"), 1L, 1);

                    b.Property<string>("WalletTypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("WalletType", (string)null);
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("Contracts")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Contracts")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Feedback", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.FeedbackType", "FeedbackType")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("FeedBacks")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackType");

                    b.Navigation("Flat");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.AttributeForNumeric", "AttributeForNumeric")
                        .WithMany()
                        .HasForeignKey("AttributeForNumericId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.FlatType", "FlatType")
                        .WithMany("Flats")
                        .HasForeignKey("FlatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeForNumeric");

                    b.Navigation("Building");

                    b.Navigation("FlatType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany("Invoices")
                        .HasForeignKey("RenterId");

                    b.Navigation("Account");

                    b.Navigation("InvoiceType");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.InvoiceDetail", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.PlaceholderForFee", "PlaceholderForFee")
                        .WithMany()
                        .HasForeignKey("PlaceholderForFeeId");

                    b.HasOne("Domain.EntitiesForManagement.ServiceEntity", "Service")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Invoice");

                    b.Navigation("PlaceholderForFee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.University", "University")
                        .WithMany("Majors")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Notification", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Notif__10216507");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Major", "Major")
                        .WithOne("Renter")
                        .HasForeignKey("Domain.EntitiesForManagement.Renter", "MajorId");

                    b.HasOne("Domain.EntitiesForManagement.University", "University")
                        .WithMany("Renters")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Major");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Room", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("Rooms")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.ServiceType", "ServiceType")
                        .WithMany("ServiceEntities")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Ticket", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Contract", "Contract")
                        .WithMany("Tickets")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contract");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Transaction", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UserDevice", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Account", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("AccountId");

                    b.HasOne("Domain.EntitiesForManagement.Renter", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("RenterId");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.UtilitiesFlat", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Flat", "Flat")
                        .WithMany("UtilitiesFlats")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.Utility", "Utility")
                        .WithMany("UtilitiesFlats")
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("Utility");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Wallet", b =>
                {
                    b.HasOne("Domain.EntitiesForManagement.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EntitiesForManagement.WalletType", "WalletType")
                        .WithMany()
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Account", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Area", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Contract", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Flat", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("FeedBacks");

                    b.Navigation("Rooms");

                    b.Navigation("UtilitiesFlats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.FlatType", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Major", b =>
                {
                    b.Navigation("Renter");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Renter", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceEntity", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.ServiceType", b =>
                {
                    b.Navigation("ServiceEntities");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.University", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("Renters");
                });

            modelBuilder.Entity("Domain.EntitiesForManagement.Utility", b =>
                {
                    b.Navigation("UtilitiesFlats");
                });
#pragma warning restore 612, 618
        }
    }
}
